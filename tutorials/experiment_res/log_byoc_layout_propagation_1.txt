def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight) {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: sequentialopt_level: 2required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight) {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: RemoveUnusedFunctionsopt_level: 1required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight) {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight) {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: CanonicalizeOpsopt_level: 3required passes: [
InferType, ]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight: Tensor[(256, 3, 3, 3), float32], %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight: Tensor[(512, 256, 3, 3), float32], %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight: Tensor[(512, 256, 3, 3), float32], %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight: Tensor[(256, 3, 3, 3), float32], %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight: Tensor[(512, 256, 3, 3), float32], %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight: Tensor[(512, 256, 3, 3), float32], %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: ConvertLayoutopt_level: 3required passes: [
InferType, CanonicalizeOps, ]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight: Tensor[(256, 3, 3, 3), float32], %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight: Tensor[(512, 256, 3, 3), float32], %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight: Tensor[(512, 256, 3, 3), float32], %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight: Tensor[(256, 3, 3, 3), float32], %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight: Tensor[(512, 256, 3, 3), float32], %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight: Tensor[(512, 256, 3, 3), float32], %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v9b92b5b7_ee75_4cc5_a7ae_bd3d3df13d08_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v0d5d5d1d_f99d_4a3c_bd90_6bb5bbb0718a_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v2fbdb765_9197_4a01_bb22_42a9ed7dcdf9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v72cbb766_56bf_4852_baa1_c1cfd14276d1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

