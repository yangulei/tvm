dnnl_verbose,info,oneDNN v2.0.0 (commit 83ebc40d86bc54f0f23e947235e53570eeacf254)
dnnl_verbose,info,cpu,runtime:OpenMP
dnnl_verbose,info,cpu,isa:Intel AVX-512 with AVX512BW, AVX512VL, and AVX512DQ extensions
dnnl_verbose,info,gpu,runtime:none
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:Acdb16a:f0,,,256x3x3x3,0.0170898
dnnl_verbose,exec,cpu,convolution,jit:avx512_common,forward_inference,src_f32::blocked:abcd:f0 wei_f32::blocked:Acdb16a:f0 bia_undef::undef::f0 dst_f32::blocked:aBcd16b:f0,,alg:convolution_direct,mb1_ic3oc256_ih224oh222kh3sh1dh0ph0_iw224ow222kw3sw1dw0pw0,3.81714
dnnl_verbose,exec,cpu,eltwise,jit:avx512_common,forward_inference,data_f32::blocked:aBcd16b:f0 diff_undef::undef::f0,,alg:eltwise_relu alpha:0 beta:0,1x256x222x222,4.28784
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:Acdb16a:f0,,,256x3x3x3,0.0180664
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:ABcd16b16a:f0,,,512x256x3x3,0.39502
dnnl_verbose,exec,cpu,convolution,jit:avx512_common,forward_inference,src_f32::blocked:aBcd16b:f0 wei_f32::blocked:ABcd16b16a:f0 bia_undef::undef::f0 dst_f32::blocked:aBcd16b:f0,,alg:convolution_direct,mb1_ic256oc512_ih222oh220kh3sh1dh0ph0_iw222ow220kw3sw1dw0pw0,75.175
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:ABcd16b16a:f0,,,512x256x3x3,0.46582
dnnl_verbose,exec,cpu,convolution,jit:avx512_common,forward_inference,src_f32::blocked:aBcd16b:f0 wei_f32::blocked:ABcd16b16a:f0 bia_undef::undef::f0 dst_f32::blocked:aBcd16b:f0,,alg:convolution_direct,mb1_ic256oc512_ih222oh220kh3sh1dh0ph0_iw222ow220kw3sw1dw0pw0,78.634
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:ABcd16b16a:f0,,,512x256x3x3,0.428955
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:ABcd16b16a:f0,,,512x256x3x3,0.408936
dnnl_verbose,exec,cpu,convolution,jit:avx512_common,forward_inference,src_f32::blocked:aBcd16b:f0 wei_f32::blocked:ABcd16b16a:f0 bia_undef::undef::f0 dst_f32::blocked:aBcd16b:f0,,alg:convolution_direct,mb1_ic256oc512_ih222oh220kh3sh1dh0ph0_iw222ow220kw3sw1dw0pw0,75.698
dnnl_verbose,exec,cpu,eltwise,jit:avx512_common,forward_inference,data_f32::blocked:aBcd16b:f0 diff_undef::undef::f0,,alg:eltwise_relu alpha:0 beta:0,1x512x220x220,5.5249
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:ABcd16b16a:f0,,,512x256x3x3,0.22998
dnnl_verbose,exec,cpu,eltwise,jit:avx512_common,forward_inference,data_f32::blocked:aBcd16b:f0 diff_undef::undef::f0,,alg:eltwise_relu alpha:0 beta:0,1x512x220x220,4.77905
dnnl_verbose,exec,cpu,reorder,jit:uni,undef,src_f32::blocked:abcd:f0 dst_f32::blocked:ABcd16b16a:f0,,,512x256x3x3,0.178223
dnnl_verbose,exec,cpu,eltwise,jit:avx512_common,forward_inference,data_f32::blocked:aBcd16b:f0 diff_undef::undef::f0,,alg:eltwise_relu alpha:0 beta:0,1x512x220x220,4.76782
dnnl_verbose,exec,cpu,reorder,jit:blk,undef,src_f32::blocked:aBcd16b:f0 dst_f32::blocked:abcd:f0,,,1x512x220x220,5.5498
dnnl_verbose,exec,cpu,reorder,jit:blk,undef,src_f32::blocked:aBcd16b:f0 dst_f32::blocked:abcd:f0,,,1x512x220x220,5.44604
dnnl_verbose,exec,cpu,reorder,jit:blk,undef,src_f32::blocked:aBcd16b:f0 dst_f32::blocked:abcd:f0,,,1x512x220x220,5.51001
def @main(%data: Tensor[(1, 3, 224, 224), float32], %v3ad69a56_2ab7_4272_862a_9b0fcb2cc484_weight, %v0454fdd7_20ba_434f_95fc_afcd856d3983_weight, %v32c9709e_e983_457d_b29e_884eee156707_weight, %de2e6e74_efcb_40d0_ae9f_1a59ae552ac5_weight) {
  %0 = nn.conv2d(%data, %v3ad69a56_2ab7_4272_862a_9b0fcb2cc484_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v0454fdd7_20ba_434f_95fc_afcd856d3983_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v32c9709e_e983_457d_b29e_884eee156707_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %de2e6e74_efcb_40d0_ae9f_1a59ae552ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

