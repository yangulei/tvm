def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, %v027e7931_6a7e_4317_b8af_765950e968e7_weight) {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: sequentialopt_level: 2required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, %v027e7931_6a7e_4317_b8af_765950e968e7_weight) {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, %v027e7931_6a7e_4317_b8af_765950e968e7_weight) {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: RemoveUnusedFunctionsopt_level: 1required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: CanonicalizeOpsopt_level: 3required passes: [
InferType, ]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: ConvertLayoutopt_level: 3required passes: [
InferType, CanonicalizeOps, ]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %1 = nn.relu(%0);
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %4 = nn.relu(%2);
  %5 = nn.relu(%3);
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %7 = add(%4, %5);
  %8 = nn.relu(%6);
  add(%7, %8)
}

Running pass: {} The meta data of the pass: pass name: FoldConstantopt_level: 2required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: AnnotateTargetopt_level: 2required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: AnnotateTargetFuncopt_level: 0required passes: [
InferType, ]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %v027e7931_6a7e_4317_b8af_765950e968e7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = annotation.compiler_end(%2, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%3, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %6 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %7 = annotation.compiler_begin(%6, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %8 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][6]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %9 = nn.conv2d(%7, %8, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_end(%9, meta[relay.attrs.CompilerAttrs][7]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %11 = annotation.compiler_begin(%10, meta[relay.attrs.CompilerAttrs][8]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = annotation.compiler_end(%12, meta[relay.attrs.CompilerAttrs][9]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][11]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %15 = annotation.compiler_begin(%14, meta[relay.attrs.CompilerAttrs][12]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %16 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][13]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %17 = nn.conv2d(%15, %16, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %18 = annotation.compiler_end(%17, meta[relay.attrs.CompilerAttrs][14]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %19 = annotation.compiler_begin(%18, meta[relay.attrs.CompilerAttrs][15]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %20 = nn.relu(%19) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %21 = annotation.compiler_end(%20, meta[relay.attrs.CompilerAttrs][16]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %22 = annotation.compiler_begin(%13, meta[relay.attrs.CompilerAttrs][10]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %23 = annotation.compiler_begin(%21, meta[relay.attrs.CompilerAttrs][17]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %24 = add(%22, %23) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %25 = annotation.compiler_end(%24, meta[relay.attrs.CompilerAttrs][18]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %26 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][20]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %27 = annotation.compiler_begin(%26, meta[relay.attrs.CompilerAttrs][21]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %28 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][22]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %29 = nn.conv2d(%27, %28, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %30 = annotation.compiler_end(%29, meta[relay.attrs.CompilerAttrs][23]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %31 = annotation.compiler_begin(%30, meta[relay.attrs.CompilerAttrs][24]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %32 = nn.relu(%31) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %33 = annotation.compiler_end(%32, meta[relay.attrs.CompilerAttrs][25]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %34 = annotation.compiler_begin(%25, meta[relay.attrs.CompilerAttrs][19]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %35 = annotation.compiler_begin(%33, meta[relay.attrs.CompilerAttrs][26]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %36 = add(%34, %35) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%36, meta[relay.attrs.CompilerAttrs][27]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = annotation.compiler_end(%2, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%3, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %6 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %7 = annotation.compiler_begin(%6, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %8 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][6]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %9 = nn.conv2d(%7, %8, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_end(%9, meta[relay.attrs.CompilerAttrs][7]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %11 = annotation.compiler_begin(%10, meta[relay.attrs.CompilerAttrs][8]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = annotation.compiler_end(%12, meta[relay.attrs.CompilerAttrs][9]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][11]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %15 = annotation.compiler_begin(%14, meta[relay.attrs.CompilerAttrs][12]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %16 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][13]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %17 = nn.conv2d(%15, %16, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %18 = annotation.compiler_end(%17, meta[relay.attrs.CompilerAttrs][14]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %19 = annotation.compiler_begin(%18, meta[relay.attrs.CompilerAttrs][15]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %20 = nn.relu(%19) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %21 = annotation.compiler_end(%20, meta[relay.attrs.CompilerAttrs][16]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %22 = annotation.compiler_begin(%13, meta[relay.attrs.CompilerAttrs][10]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %23 = annotation.compiler_begin(%21, meta[relay.attrs.CompilerAttrs][17]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %24 = add(%22, %23) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %25 = annotation.compiler_end(%24, meta[relay.attrs.CompilerAttrs][18]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %26 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][20]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %27 = annotation.compiler_begin(%26, meta[relay.attrs.CompilerAttrs][21]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %28 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][22]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %29 = nn.conv2d(%27, %28, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %30 = annotation.compiler_end(%29, meta[relay.attrs.CompilerAttrs][23]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %31 = annotation.compiler_begin(%30, meta[relay.attrs.CompilerAttrs][24]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %32 = nn.relu(%31) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %33 = annotation.compiler_end(%32, meta[relay.attrs.CompilerAttrs][25]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %34 = annotation.compiler_begin(%25, meta[relay.attrs.CompilerAttrs][19]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %35 = annotation.compiler_begin(%33, meta[relay.attrs.CompilerAttrs][26]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %36 = add(%34, %35) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%36, meta[relay.attrs.CompilerAttrs][27]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: sequentialopt_level: 2required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = annotation.compiler_end(%2, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%3, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %6 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %7 = annotation.compiler_begin(%6, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %8 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][6]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %9 = nn.conv2d(%7, %8, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_end(%9, meta[relay.attrs.CompilerAttrs][7]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %11 = annotation.compiler_begin(%10, meta[relay.attrs.CompilerAttrs][8]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = annotation.compiler_end(%12, meta[relay.attrs.CompilerAttrs][9]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][11]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %15 = annotation.compiler_begin(%14, meta[relay.attrs.CompilerAttrs][12]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %16 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][13]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %17 = nn.conv2d(%15, %16, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %18 = annotation.compiler_end(%17, meta[relay.attrs.CompilerAttrs][14]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %19 = annotation.compiler_begin(%18, meta[relay.attrs.CompilerAttrs][15]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %20 = nn.relu(%19) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %21 = annotation.compiler_end(%20, meta[relay.attrs.CompilerAttrs][16]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %22 = annotation.compiler_begin(%13, meta[relay.attrs.CompilerAttrs][10]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %23 = annotation.compiler_begin(%21, meta[relay.attrs.CompilerAttrs][17]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %24 = add(%22, %23) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %25 = annotation.compiler_end(%24, meta[relay.attrs.CompilerAttrs][18]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %26 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][20]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %27 = annotation.compiler_begin(%26, meta[relay.attrs.CompilerAttrs][21]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %28 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][22]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %29 = nn.conv2d(%27, %28, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %30 = annotation.compiler_end(%29, meta[relay.attrs.CompilerAttrs][23]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %31 = annotation.compiler_begin(%30, meta[relay.attrs.CompilerAttrs][24]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %32 = nn.relu(%31) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %33 = annotation.compiler_end(%32, meta[relay.attrs.CompilerAttrs][25]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %34 = annotation.compiler_begin(%25, meta[relay.attrs.CompilerAttrs][19]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %35 = annotation.compiler_begin(%33, meta[relay.attrs.CompilerAttrs][26]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %36 = add(%34, %35) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%36, meta[relay.attrs.CompilerAttrs][27]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: MergeCompilerRegionsopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = annotation.compiler_end(%2, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%3, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %6 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %7 = annotation.compiler_begin(%6, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %8 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][6]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %9 = nn.conv2d(%7, %8, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_end(%9, meta[relay.attrs.CompilerAttrs][7]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %11 = annotation.compiler_begin(%10, meta[relay.attrs.CompilerAttrs][8]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = annotation.compiler_end(%12, meta[relay.attrs.CompilerAttrs][9]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][11]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %15 = annotation.compiler_begin(%14, meta[relay.attrs.CompilerAttrs][12]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %16 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][13]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %17 = nn.conv2d(%15, %16, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %18 = annotation.compiler_end(%17, meta[relay.attrs.CompilerAttrs][14]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %19 = annotation.compiler_begin(%18, meta[relay.attrs.CompilerAttrs][15]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %20 = nn.relu(%19) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %21 = annotation.compiler_end(%20, meta[relay.attrs.CompilerAttrs][16]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %22 = annotation.compiler_begin(%13, meta[relay.attrs.CompilerAttrs][10]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %23 = annotation.compiler_begin(%21, meta[relay.attrs.CompilerAttrs][17]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %24 = add(%22, %23) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %25 = annotation.compiler_end(%24, meta[relay.attrs.CompilerAttrs][18]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %26 = annotation.compiler_end(%5, meta[relay.attrs.CompilerAttrs][20]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %27 = annotation.compiler_begin(%26, meta[relay.attrs.CompilerAttrs][21]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %28 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][22]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %29 = nn.conv2d(%27, %28, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %30 = annotation.compiler_end(%29, meta[relay.attrs.CompilerAttrs][23]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %31 = annotation.compiler_begin(%30, meta[relay.attrs.CompilerAttrs][24]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %32 = nn.relu(%31) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %33 = annotation.compiler_end(%32, meta[relay.attrs.CompilerAttrs][25]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %34 = annotation.compiler_begin(%25, meta[relay.attrs.CompilerAttrs][19]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %35 = annotation.compiler_begin(%33, meta[relay.attrs.CompilerAttrs][26]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %36 = add(%34, %35) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%36, meta[relay.attrs.CompilerAttrs][27]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2);
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %8 = nn.relu(%5);
  %9 = nn.relu(%7);
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %12 = add(%8, %9);
  %13 = nn.relu(%11);
  %14 = add(%12, %13);
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5])
}


Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: sequentialopt_level: 2required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: FlattenNestedTuplesopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: RemoveDefaultAnnotationsopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: PartitionGraphopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}


Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = annotation.compiler_begin(%data, meta[relay.attrs.CompilerAttrs][0]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = annotation.compiler_begin(%v689cc3b5_28d5_482e_9920_800c40fd9994_weight, meta[relay.attrs.CompilerAttrs][1]) /* ty=Tensor[(256, 3, 3, 3), float32] */;
  %2 = nn.conv2d(%0, %1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %4 = annotation.compiler_begin(%v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, meta[relay.attrs.CompilerAttrs][2]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %5 = nn.conv2d(%3, %4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = annotation.compiler_begin(%v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, meta[relay.attrs.CompilerAttrs][3]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %7 = nn.conv2d(%3, %6, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %10 = annotation.compiler_begin(%v027e7931_6a7e_4317_b8af_765950e968e7_weight, meta[relay.attrs.CompilerAttrs][4]) /* ty=Tensor[(512, 256, 3, 3), float32] */;
  %11 = nn.conv2d(%3, %10, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %12 = add(%8, %9) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %13 = nn.relu(%11) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  annotation.compiler_end(%14, meta[relay.attrs.CompilerAttrs][5]) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

def @dnnl_0(%dnnl_0_i0: Tensor[(1, 3, 224, 224), float32], %dnnl_0_i1: Tensor[(256, 3, 3, 3), float32], %dnnl_0_i2: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i3: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i4: Tensor[(512, 256, 3, 3), float32], global_symbol="dnnl_0", Primitive=1, Compiler="dnnl", Inline=1) -> Tensor[(1, 512, 220, 220), float32] {
  %15 = nn.conv2d(%dnnl_0_i0, %dnnl_0_i1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]);
  %16 = nn.relu(%15);
  %17 = nn.conv2d(%16, %dnnl_0_i2, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %18 = nn.conv2d(%16, %dnnl_0_i3, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %19 = nn.relu(%17);
  %20 = nn.relu(%18);
  %21 = nn.conv2d(%16, %dnnl_0_i4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]);
  %22 = add(%19, %20);
  %23 = nn.relu(%21);
  add(%22, %23)
}


Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  @dnnl_0(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, %v027e7931_6a7e_4317_b8af_765950e968e7_weight)
}

def @dnnl_0(%dnnl_0_i0: Tensor[(1, 3, 224, 224), float32], %dnnl_0_i1: Tensor[(256, 3, 3, 3), float32], %dnnl_0_i2: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i3: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i4: Tensor[(512, 256, 3, 3), float32], global_symbol="dnnl_0", Primitive=1, Compiler="dnnl", Inline=1) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%dnnl_0_i0, %dnnl_0_i1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %dnnl_0_i2, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %dnnl_0_i3, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %dnnl_0_i4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: NameMangleExtFuncsopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  @dnnl_0(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, %v027e7931_6a7e_4317_b8af_765950e968e7_weight) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

def @dnnl_0(%dnnl_0_i0: Tensor[(1, 3, 224, 224), float32], %dnnl_0_i1: Tensor[(256, 3, 3, 3), float32], %dnnl_0_i2: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i3: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i4: Tensor[(512, 256, 3, 3), float32], global_symbol="dnnl_0", Primitive=1, Compiler="dnnl", Inline=1) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%dnnl_0_i0, %dnnl_0_i1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %dnnl_0_i2, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %dnnl_0_i3, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %dnnl_0_i4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  @tvmgen_default_dnnl_0(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, %v027e7931_6a7e_4317_b8af_765950e968e7_weight)
}

def @tvmgen_default_dnnl_0(%dnnl_0_i0: Tensor[(1, 3, 224, 224), float32], %dnnl_0_i1: Tensor[(256, 3, 3, 3), float32], %dnnl_0_i2: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i3: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i4: Tensor[(512, 256, 3, 3), float32], Inline=1, Compiler="dnnl", global_symbol="tvmgen_default_dnnl_0", Primitive=1) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%dnnl_0_i0, %dnnl_0_i1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %dnnl_0_i2, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %dnnl_0_i3, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %dnnl_0_i4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

Running pass: {} The meta data of the pass: pass name: InferTypeopt_level: 0required passes: [
]

def @main(%data: Tensor[(1, 3, 224, 224), float32], %v689cc3b5_28d5_482e_9920_800c40fd9994_weight: Tensor[(256, 3, 3, 3), float32], %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight: Tensor[(512, 256, 3, 3), float32], %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight: Tensor[(512, 256, 3, 3), float32], %v027e7931_6a7e_4317_b8af_765950e968e7_weight: Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 220, 220), float32] {
  @tvmgen_default_dnnl_0(%data, %v689cc3b5_28d5_482e_9920_800c40fd9994_weight, %v190712c7_0f58_4a40_ab71_1b0fd9fabaa1_weight, %v11d101a6_21b2_49d1_b225_c4d2d0745ac5_weight, %v027e7931_6a7e_4317_b8af_765950e968e7_weight) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

def @tvmgen_default_dnnl_0(%dnnl_0_i0: Tensor[(1, 3, 224, 224), float32], %dnnl_0_i1: Tensor[(256, 3, 3, 3), float32], %dnnl_0_i2: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i3: Tensor[(512, 256, 3, 3), float32], %dnnl_0_i4: Tensor[(512, 256, 3, 3), float32], Inline=1, Compiler="dnnl", global_symbol="tvmgen_default_dnnl_0", Primitive=1) -> Tensor[(1, 512, 220, 220), float32] {
  %0 = nn.conv2d(%dnnl_0_i0, %dnnl_0_i1, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %1 = nn.relu(%0) /* ty=Tensor[(1, 256, 222, 222), float32] */;
  %2 = nn.conv2d(%1, %dnnl_0_i2, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %3 = nn.conv2d(%1, %dnnl_0_i3, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %4 = nn.relu(%2) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %5 = nn.relu(%3) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %6 = nn.conv2d(%1, %dnnl_0_i4, padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %7 = add(%4, %5) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 512, 220, 220), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 512, 220, 220), float32] */
}

